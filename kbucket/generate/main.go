// Package main 实现了一个用于生成键前缀映射的工具
package main

import (
	"crypto/sha256"
	"encoding/binary"
	"fmt"
	"os"
	"strings"

	mh "github.com/dep2p/go-dep2p/multiformats/multihash"
)

// 常量定义
const (
	bits   = 16        // 每个前缀的位数
	target = 1 << bits // 目标值为 2^16
	idLen  = 32 + 2    // ID 长度为 32 字节加 2 字节前缀
)

// main 函数生成一个包含键前缀映射的 Go 源文件
//
// 该函数执行以下步骤:
// 1. 从环境变量获取包名和文件名
// 2. 生成一个包含 target 个前缀值的映射数组
// 3. 将生成的映射写入到新的源文件中
//
// 生成的映射用于将哈希值快速映射到对应的索引位置
func main() {
	// 从环境变量获取包名和文件名
	pkg := os.Getenv("GOPACKAGE")
	file := os.Getenv("GOFILE")
	targetFile := strings.TrimSuffix(file, ".go") + "_prefixmap.go"

	// 初始化数据结构
	ids := new([target]uint32) // 存储生成的前缀值
	found := new([target]bool) // 标记已找到的前缀值
	count := int32(0)          // 已找到的前缀值计数

	// 初始化哈希计算所需的缓冲区
	out := make([]byte, 32)             // 哈希输出缓冲区
	inp := [idLen]byte{mh.SHA2_256, 32} // 哈希输入缓冲区，预设 SHA256 标识符
	hasher := sha256.New()              // SHA256 哈希计算器

	// 生成前缀映射
	for i := uint32(0); count < target; i++ {
		// 将当前计数器值写入输入缓冲区
		binary.BigEndian.PutUint32(inp[2:], i)

		// 计算哈希值
		hasher.Write(inp[:])
		out = hasher.Sum(out[:0])
		hasher.Reset()

		// 提取前缀值并存储
		prefix := binary.BigEndian.Uint32(out) >> (32 - bits)
		if !found[prefix] {
			found[prefix] = true
			ids[prefix] = i
			count++
		}
	}

	// 创建输出文件
	f, err := os.Create(targetFile)
	if err != nil {
		panic(err)
	}

	// 定义格式化输出函数
	printf := func(s string, args ...interface{}) {
		_, err = fmt.Fprintf(f, s, args...)
		if err != nil {
			panic(err)
		}
	}

	// 写入文件头部
	printf("package %s\n\n", pkg)
	printf("// Code generated by generate/generate_map.go DO NOT EDIT\n")
	printf("var keyPrefixMap = [...]uint32{")

	// 写入映射数组
	for i, j := range ids[:] {
		if i%16 == 0 {
			printf("\n\t")
		} else {
			printf(" ")
		}
		printf("%d,", j)
	}
	printf("\n}")

	// 关闭文件
	if err = f.Close(); err != nil {
		panic(err)
	}
}
