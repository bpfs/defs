// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: transfer.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TransferStatus 表示传输任务的通用状态
type TransferStatus int32

const (
	// 未指定状态，表示任务状态未初始化或未知
	TransferStatus_TRANSFER_STATUS_UNSPECIFIED TransferStatus = 0
	// 编解码中，表示文件正在进行编码或解码处理
	TransferStatus_TRANSFER_STATUS_CODING TransferStatus = 1
	// 待处理，任务已创建但尚未开始执行
	TransferStatus_TRANSFER_STATUS_PENDING TransferStatus = 2
	// 传输中，任务正在执行数据传输操作
	TransferStatus_TRANSFER_STATUS_TRANSFERRING TransferStatus = 3
	// 已暂停，任务已被暂停，可通过继续操作恢复
	TransferStatus_TRANSFER_STATUS_PAUSED TransferStatus = 4
	// 已完成，任务已成功完成所有操作
	TransferStatus_TRANSFER_STATUS_COMPLETED TransferStatus = 5
	// 失败，任务由于各种原因未能成功完成
	TransferStatus_TRANSFER_STATUS_FAILED TransferStatus = 6
	// 已取消，任务被主动取消
	TransferStatus_TRANSFER_STATUS_CANCELED TransferStatus = 7
	// 异常，表示传输过程中检测到严重问题
	TransferStatus_TRANSFER_STATUS_EXCEPTION TransferStatus = 8
)

var TransferStatus_name = map[int32]string{
	0: "TRANSFER_STATUS_UNSPECIFIED",
	1: "TRANSFER_STATUS_CODING",
	2: "TRANSFER_STATUS_PENDING",
	3: "TRANSFER_STATUS_TRANSFERRING",
	4: "TRANSFER_STATUS_PAUSED",
	5: "TRANSFER_STATUS_COMPLETED",
	6: "TRANSFER_STATUS_FAILED",
	7: "TRANSFER_STATUS_CANCELED",
	8: "TRANSFER_STATUS_EXCEPTION",
}

var TransferStatus_value = map[string]int32{
	"TRANSFER_STATUS_UNSPECIFIED":  0,
	"TRANSFER_STATUS_CODING":       1,
	"TRANSFER_STATUS_PENDING":      2,
	"TRANSFER_STATUS_TRANSFERRING": 3,
	"TRANSFER_STATUS_PAUSED":       4,
	"TRANSFER_STATUS_COMPLETED":    5,
	"TRANSFER_STATUS_FAILED":       6,
	"TRANSFER_STATUS_CANCELED":     7,
	"TRANSFER_STATUS_EXCEPTION":    8,
}

func (x TransferStatus) String() string {
	return proto.EnumName(TransferStatus_name, int32(x))
}

func (TransferStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_96c3e6bcafb460d3, []int{0}
}

type SegmentStatus int32

const (
	// 未指定状态，表示片段状态未初始化或未知
	SegmentStatus_SEGMENT_STATUS_UNSPECIFIED SegmentStatus = 0
	// 待处理，文件片段已准备好但尚未开始传输
	// - 上传：文件片段已完成预处理，等待上传
	// - 下载：文件片段元信息已获取，等待下载
	// - 传输：文件片段已完成预处理，等待传输
	SegmentStatus_SEGMENT_STATUS_PENDING SegmentStatus = 1
	// 传输中，文件片段正在传输过程中
	// - 上传：数据正在上传到目标存储
	// - 下载：数据正在从源存储下载
	// - 传输：数据正在传输到目标节点
	SegmentStatus_SEGMENT_STATUS_TRANSFERRING SegmentStatus = 2
	// 已完成，文件片段传输成功并通过完整性校验
	// - 校验内容：数据完整性、大小、哈希值等
	SegmentStatus_SEGMENT_STATUS_COMPLETED SegmentStatus = 3
	// 失败，文件片段传输失败
	// 可能的原因：
	// - 网络问题：连接断开、超时
	// - 存储问题：空间不足、权限错误
	// - 校验失败：数据损坏、大小不匹配
	SegmentStatus_SEGMENT_STATUS_FAILED SegmentStatus = 4
)

var SegmentStatus_name = map[int32]string{
	0: "SEGMENT_STATUS_UNSPECIFIED",
	1: "SEGMENT_STATUS_PENDING",
	2: "SEGMENT_STATUS_TRANSFERRING",
	3: "SEGMENT_STATUS_COMPLETED",
	4: "SEGMENT_STATUS_FAILED",
}

var SegmentStatus_value = map[string]int32{
	"SEGMENT_STATUS_UNSPECIFIED":  0,
	"SEGMENT_STATUS_PENDING":      1,
	"SEGMENT_STATUS_TRANSFERRING": 2,
	"SEGMENT_STATUS_COMPLETED":    3,
	"SEGMENT_STATUS_FAILED":       4,
}

func (x SegmentStatus) String() string {
	return proto.EnumName(SegmentStatus_name, int32(x))
}

func (SegmentStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_96c3e6bcafb460d3, []int{1}
}

func init() {
	proto.RegisterEnum("pb.TransferStatus", TransferStatus_name, TransferStatus_value)
	proto.RegisterEnum("pb.SegmentStatus", SegmentStatus_name, SegmentStatus_value)
}

func init() { proto.RegisterFile("transfer.proto", fileDescriptor_96c3e6bcafb460d3) }

var fileDescriptor_96c3e6bcafb460d3 = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x29, 0x4a, 0xcc,
	0x2b, 0x4e, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0xd2, 0x5a,
	0xc0, 0xc4, 0xc5, 0x17, 0x02, 0x15, 0x0e, 0x2e, 0x49, 0x2c, 0x29, 0x2d, 0x16, 0x92, 0xe7, 0x92,
	0x0e, 0x09, 0x72, 0xf4, 0x0b, 0x76, 0x73, 0x0d, 0x8a, 0x0f, 0x0e, 0x71, 0x0c, 0x09, 0x0d, 0x8e,
	0x0f, 0xf5, 0x0b, 0x0e, 0x70, 0x75, 0xf6, 0x74, 0xf3, 0x74, 0x75, 0x11, 0x60, 0x10, 0x92, 0xe2,
	0x12, 0x43, 0x57, 0xe0, 0xec, 0xef, 0xe2, 0xe9, 0xe7, 0x2e, 0xc0, 0x28, 0x24, 0xcd, 0x25, 0x8e,
	0x2e, 0x17, 0xe0, 0xea, 0x07, 0x96, 0x64, 0x12, 0x52, 0xe0, 0x92, 0x41, 0x97, 0x84, 0xf1, 0x83,
	0x40, 0x2a, 0x98, 0xb1, 0x19, 0x1d, 0xe0, 0x18, 0x1a, 0xec, 0xea, 0x22, 0xc0, 0x22, 0x24, 0xcb,
	0x25, 0x89, 0x69, 0xad, 0x6f, 0x80, 0x8f, 0x6b, 0x88, 0xab, 0x8b, 0x00, 0x2b, 0x36, 0xad, 0x6e,
	0x8e, 0x9e, 0x3e, 0xae, 0x2e, 0x02, 0x6c, 0x42, 0x32, 0x5c, 0x12, 0x18, 0x5a, 0x1d, 0xfd, 0x9c,
	0x5d, 0x41, 0xb2, 0xec, 0xd8, 0x0c, 0x76, 0x8d, 0x70, 0x76, 0x0d, 0x08, 0xf1, 0xf4, 0xf7, 0x13,
	0xe0, 0xd0, 0x5a, 0xca, 0xc8, 0xc5, 0x1b, 0x9c, 0x9a, 0x9e, 0x9b, 0x9a, 0x57, 0x02, 0x0d, 0x21,
	0x39, 0x2e, 0xa9, 0x60, 0x57, 0x77, 0x5f, 0x57, 0xbf, 0x10, 0x9c, 0x01, 0x84, 0x26, 0x0f, 0x0b,
	0x03, 0x46, 0x50, 0xe8, 0xa2, 0xc9, 0xa1, 0x04, 0x01, 0x13, 0xc8, 0xad, 0x68, 0x0a, 0x10, 0xbe,
	0x64, 0x16, 0x92, 0xe4, 0x12, 0x45, 0x93, 0x85, 0x7a, 0x92, 0xc5, 0x89, 0xe7, 0xc4, 0x23, 0x39,
	0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x4c, 0x62, 0x03, 0xc7, 0xb1, 0x31, 0x20,
	0x00, 0x00, 0xff, 0xff, 0xc9, 0xbd, 0x0c, 0x87, 0xf5, 0x01, 0x00, 0x00,
}
