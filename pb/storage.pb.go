// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FileSegmentStorageSql 表示文件片段的存储结构,用于持久化存储文件片段及其元数据()
type FileSegmentStorageSql struct {
	// 文件唯一标识,由文件内容和所有者私钥生成的SHA256哈希值
	FileId string `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	// 文件原始名称,不包含扩展名
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 文件扩展名,不包含点号(.)
	Extension string `protobuf:"bytes,3,opt,name=extension,proto3" json:"extension,omitempty"`
	// 文件总大小,单位:字节
	Size_ int64 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	// MIME类型,用于标识文件格式,如"application/pdf"
	ContentType string `protobuf:"bytes,5,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// 文件内容的SHA256哈希值,用于校验文件完整性
	Sha256Hash []byte `protobuf:"bytes,6,opt,name=sha256_hash,json=sha256Hash,proto3" json:"sha256_hash,omitempty"`
	// 文件首次上传的Unix时间戳
	UploadTime int64 `protobuf:"varint,7,opt,name=upload_time,json=uploadTime,proto3" json:"upload_time,omitempty"`
	// P2PKH脚本,用于验证文件所有者身份
	// @gotags: badgerhold:"index"
	P2PkhScript []byte `protobuf:"bytes,8,opt,name=p2pkh_script,json=p2pkhScript,proto3" json:"p2pkh_script,omitempty" badgerhold:"index"`
	// P2PK脚本,用于文件签名验证
	P2PkScript []byte `protobuf:"bytes,9,opt,name=p2pk_script,json=p2pkScript,proto3" json:"p2pk_script,omitempty"`
	// 文件分片哈希表,key为分片索引,value为分片的哈希信息
	SliceTable []byte `protobuf:"bytes,10,opt,name=slice_table,json=sliceTable,proto3" json:"slice_table,omitempty"`
	// 当前片段的唯一标识,由file_id和segment_index生成
	SegmentId string `protobuf:"bytes,11,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	// 当前片段在文件中的索引位置,从0开始
	SegmentIndex int64 `protobuf:"varint,12,opt,name=segment_index,json=segmentIndex,proto3" json:"segment_index,omitempty"`
	// 当前片段的CRC32校验和
	Crc32Checksum uint32 `protobuf:"varint,13,opt,name=crc32_checksum,json=crc32Checksum,proto3" json:"crc32_checksum,omitempty"`
	// 当前片段的加密后内容
	SegmentContent []byte `protobuf:"bytes,14,opt,name=segment_content,json=segmentContent,proto3" json:"segment_content,omitempty"`
	// 用于解密segment_content的AES密钥
	EncryptionKey []byte `protobuf:"bytes,15,opt,name=encryption_key,json=encryptionKey,proto3" json:"encryption_key,omitempty"`
	// 文件所有者对片段内容的数字签名
	Signature []byte `protobuf:"bytes,16,opt,name=signature,proto3" json:"signature,omitempty"`
	// 是否允许其他节点访问该片段
	Shared bool `protobuf:"varint,17,opt,name=shared,proto3" json:"shared,omitempty"`
	// 片段的版本号,用于版本控制
	Version              string   `protobuf:"bytes,18,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileSegmentStorageSql) Reset()         { *m = FileSegmentStorageSql{} }
func (m *FileSegmentStorageSql) String() string { return proto.CompactTextString(m) }
func (*FileSegmentStorageSql) ProtoMessage()    {}
func (*FileSegmentStorageSql) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{0}
}
func (m *FileSegmentStorageSql) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileSegmentStorageSql) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileSegmentStorageSql.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileSegmentStorageSql) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileSegmentStorageSql.Merge(m, src)
}
func (m *FileSegmentStorageSql) XXX_Size() int {
	return m.Size()
}
func (m *FileSegmentStorageSql) XXX_DiscardUnknown() {
	xxx_messageInfo_FileSegmentStorageSql.DiscardUnknown(m)
}

var xxx_messageInfo_FileSegmentStorageSql proto.InternalMessageInfo

func (m *FileSegmentStorageSql) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

func (m *FileSegmentStorageSql) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileSegmentStorageSql) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

func (m *FileSegmentStorageSql) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *FileSegmentStorageSql) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *FileSegmentStorageSql) GetSha256Hash() []byte {
	if m != nil {
		return m.Sha256Hash
	}
	return nil
}

func (m *FileSegmentStorageSql) GetUploadTime() int64 {
	if m != nil {
		return m.UploadTime
	}
	return 0
}

func (m *FileSegmentStorageSql) GetP2PkhScript() []byte {
	if m != nil {
		return m.P2PkhScript
	}
	return nil
}

func (m *FileSegmentStorageSql) GetP2PkScript() []byte {
	if m != nil {
		return m.P2PkScript
	}
	return nil
}

func (m *FileSegmentStorageSql) GetSliceTable() []byte {
	if m != nil {
		return m.SliceTable
	}
	return nil
}

func (m *FileSegmentStorageSql) GetSegmentId() string {
	if m != nil {
		return m.SegmentId
	}
	return ""
}

func (m *FileSegmentStorageSql) GetSegmentIndex() int64 {
	if m != nil {
		return m.SegmentIndex
	}
	return 0
}

func (m *FileSegmentStorageSql) GetCrc32Checksum() uint32 {
	if m != nil {
		return m.Crc32Checksum
	}
	return 0
}

func (m *FileSegmentStorageSql) GetSegmentContent() []byte {
	if m != nil {
		return m.SegmentContent
	}
	return nil
}

func (m *FileSegmentStorageSql) GetEncryptionKey() []byte {
	if m != nil {
		return m.EncryptionKey
	}
	return nil
}

func (m *FileSegmentStorageSql) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *FileSegmentStorageSql) GetShared() bool {
	if m != nil {
		return m.Shared
	}
	return false
}

func (m *FileSegmentStorageSql) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// FileSegmentStorage 表示文件片段的存储结构,用于持久化存储文件片段及其元数据
type FileSegmentStorage struct {
	// 文件唯一标识,由文件内容和所有者私钥生成的SHA256哈希值
	// @gotags: badgerhold:"index"
	FileId string `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty" badgerhold:"index"`
	// 文件原始名称,不包含扩展名
	// @gotags: badgerhold:"index"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" badgerhold:"index"`
	// 文件扩展名,不包含点号(.)
	Extension string `protobuf:"bytes,3,opt,name=extension,proto3" json:"extension,omitempty"`
	// 文件总大小,单位:字节
	Size_ int64 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	// MIME类型,用于标识文件格式,如"application/pdf"
	ContentType string `protobuf:"bytes,5,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// 文件内容的SHA256哈希值,用于校验文件完整性
	Sha256Hash []byte `protobuf:"bytes,6,opt,name=sha256_hash,json=sha256Hash,proto3" json:"sha256_hash,omitempty"`
	// 文件首次上传的Unix时间戳
	UploadTime int64 `protobuf:"varint,7,opt,name=upload_time,json=uploadTime,proto3" json:"upload_time,omitempty"`
	// P2PKH脚本,用于验证文件所有者身份
	// @gotags: badgerhold:"index"
	P2PkhScript []byte `protobuf:"bytes,8,opt,name=p2pkh_script,json=p2pkhScript,proto3" json:"p2pkh_script,omitempty" badgerhold:"index"`
	// P2PK脚本,用于文件签名验证
	P2PkScript []byte `protobuf:"bytes,9,opt,name=p2pk_script,json=p2pkScript,proto3" json:"p2pk_script,omitempty"`
	// 文件分片哈希表,key为分片索引,value为分片的哈希信息
	SliceTable map[int64]*HashTable `protobuf:"bytes,10,rep,name=slice_table,json=sliceTable,proto3" json:"slice_table,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 当前片段的唯一标识,由file_id和segment_index生成
	// @gotags: badgerhold:"key"
	SegmentId string `protobuf:"bytes,11,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty" badgerhold:"key"`
	// 当前片段在文件中的索引位置,从0开始
	SegmentIndex int64 `protobuf:"varint,12,opt,name=segment_index,json=segmentIndex,proto3" json:"segment_index,omitempty"`
	// 当前片段的CRC32校验和
	Crc32Checksum uint32 `protobuf:"varint,13,opt,name=crc32_checksum,json=crc32Checksum,proto3" json:"crc32_checksum,omitempty"`
	// 当前片段的加密后内容
	SegmentContent []byte `protobuf:"bytes,14,opt,name=segment_content,json=segmentContent,proto3" json:"segment_content,omitempty"`
	// 用于解密segment_content的AES密钥
	EncryptionKey []byte `protobuf:"bytes,15,opt,name=encryption_key,json=encryptionKey,proto3" json:"encryption_key,omitempty"`
	// 文件所有者对片段内容的数字签名
	Signature []byte `protobuf:"bytes,16,opt,name=signature,proto3" json:"signature,omitempty"`
	// 是否允许其他节点访问该片段
	Shared bool `protobuf:"varint,17,opt,name=shared,proto3" json:"shared,omitempty"`
	// 片段的版本号,用于版本控制
	Version              string   `protobuf:"bytes,18,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileSegmentStorage) Reset()         { *m = FileSegmentStorage{} }
func (m *FileSegmentStorage) String() string { return proto.CompactTextString(m) }
func (*FileSegmentStorage) ProtoMessage()    {}
func (*FileSegmentStorage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{1}
}
func (m *FileSegmentStorage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileSegmentStorage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileSegmentStorage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileSegmentStorage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileSegmentStorage.Merge(m, src)
}
func (m *FileSegmentStorage) XXX_Size() int {
	return m.Size()
}
func (m *FileSegmentStorage) XXX_DiscardUnknown() {
	xxx_messageInfo_FileSegmentStorage.DiscardUnknown(m)
}

var xxx_messageInfo_FileSegmentStorage proto.InternalMessageInfo

func (m *FileSegmentStorage) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

func (m *FileSegmentStorage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileSegmentStorage) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

func (m *FileSegmentStorage) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *FileSegmentStorage) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *FileSegmentStorage) GetSha256Hash() []byte {
	if m != nil {
		return m.Sha256Hash
	}
	return nil
}

func (m *FileSegmentStorage) GetUploadTime() int64 {
	if m != nil {
		return m.UploadTime
	}
	return 0
}

func (m *FileSegmentStorage) GetP2PkhScript() []byte {
	if m != nil {
		return m.P2PkhScript
	}
	return nil
}

func (m *FileSegmentStorage) GetP2PkScript() []byte {
	if m != nil {
		return m.P2PkScript
	}
	return nil
}

func (m *FileSegmentStorage) GetSliceTable() map[int64]*HashTable {
	if m != nil {
		return m.SliceTable
	}
	return nil
}

func (m *FileSegmentStorage) GetSegmentId() string {
	if m != nil {
		return m.SegmentId
	}
	return ""
}

func (m *FileSegmentStorage) GetSegmentIndex() int64 {
	if m != nil {
		return m.SegmentIndex
	}
	return 0
}

func (m *FileSegmentStorage) GetCrc32Checksum() uint32 {
	if m != nil {
		return m.Crc32Checksum
	}
	return 0
}

func (m *FileSegmentStorage) GetSegmentContent() []byte {
	if m != nil {
		return m.SegmentContent
	}
	return nil
}

func (m *FileSegmentStorage) GetEncryptionKey() []byte {
	if m != nil {
		return m.EncryptionKey
	}
	return nil
}

func (m *FileSegmentStorage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *FileSegmentStorage) GetShared() bool {
	if m != nil {
		return m.Shared
	}
	return false
}

func (m *FileSegmentStorage) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// SignatureData 定义生成数字签名时需要签名的数据字段
type SignatureData struct {
	// 文件唯一标识,由文件内容和所有者私钥生成的SHA256哈希值
	FileId string `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	// MIME类型,用于标识文件格式
	ContentType string `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// 文件内容的SHA256哈希值,用于校验文件完整性
	Sha256Hash []byte `protobuf:"bytes,3,opt,name=sha256_hash,json=sha256Hash,proto3" json:"sha256_hash,omitempty"`
	// 文件所有分片的哈希信息列表
	SliceTable []*HashTable `protobuf:"bytes,4,rep,name=slice_table,json=sliceTable,proto3" json:"slice_table,omitempty"`
	// 当前片段的唯一标识
	SegmentId string `protobuf:"bytes,5,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	// 当前片段在文件中的索引位置
	SegmentIndex int64 `protobuf:"varint,6,opt,name=segment_index,json=segmentIndex,proto3" json:"segment_index,omitempty"`
	// 当前片段的CRC32校验和
	Crc32Checksum uint32 `protobuf:"varint,7,opt,name=crc32_checksum,json=crc32Checksum,proto3" json:"crc32_checksum,omitempty"`
	// 当前片段的加密后内容
	EncryptedData        []byte   `protobuf:"bytes,8,opt,name=encrypted_data,json=encryptedData,proto3" json:"encrypted_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignatureData) Reset()         { *m = SignatureData{} }
func (m *SignatureData) String() string { return proto.CompactTextString(m) }
func (*SignatureData) ProtoMessage()    {}
func (*SignatureData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{2}
}
func (m *SignatureData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignatureData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignatureData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignatureData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureData.Merge(m, src)
}
func (m *SignatureData) XXX_Size() int {
	return m.Size()
}
func (m *SignatureData) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureData.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureData proto.InternalMessageInfo

func (m *SignatureData) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

func (m *SignatureData) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *SignatureData) GetSha256Hash() []byte {
	if m != nil {
		return m.Sha256Hash
	}
	return nil
}

func (m *SignatureData) GetSliceTable() []*HashTable {
	if m != nil {
		return m.SliceTable
	}
	return nil
}

func (m *SignatureData) GetSegmentId() string {
	if m != nil {
		return m.SegmentId
	}
	return ""
}

func (m *SignatureData) GetSegmentIndex() int64 {
	if m != nil {
		return m.SegmentIndex
	}
	return 0
}

func (m *SignatureData) GetCrc32Checksum() uint32 {
	if m != nil {
		return m.Crc32Checksum
	}
	return 0
}

func (m *SignatureData) GetEncryptedData() []byte {
	if m != nil {
		return m.EncryptedData
	}
	return nil
}

// FileMeta 定义文件的基本元数据
type FileMeta struct {
	// 文件原始名称,不包含扩展名
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 文件扩展名,不包含点号(.)
	Extension string `protobuf:"bytes,2,opt,name=extension,proto3" json:"extension,omitempty"`
	// 文件总大小,单位:字节
	Size_ int64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// MIME类型,用于标识文件格式
	ContentType string `protobuf:"bytes,4,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// 文件内容的SHA256哈希值,用于校验文件完整性
	Sha256Hash []byte `protobuf:"bytes,5,opt,name=sha256_hash,json=sha256Hash,proto3" json:"sha256_hash,omitempty"`
	// 文件最后修改的Unix时间戳
	ModifiedAt           int64    `protobuf:"varint,6,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileMeta) Reset()         { *m = FileMeta{} }
func (m *FileMeta) String() string { return proto.CompactTextString(m) }
func (*FileMeta) ProtoMessage()    {}
func (*FileMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{3}
}
func (m *FileMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileMeta.Merge(m, src)
}
func (m *FileMeta) XXX_Size() int {
	return m.Size()
}
func (m *FileMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_FileMeta.DiscardUnknown(m)
}

var xxx_messageInfo_FileMeta proto.InternalMessageInfo

func (m *FileMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileMeta) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

func (m *FileMeta) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *FileMeta) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *FileMeta) GetSha256Hash() []byte {
	if m != nil {
		return m.Sha256Hash
	}
	return nil
}

func (m *FileMeta) GetModifiedAt() int64 {
	if m != nil {
		return m.ModifiedAt
	}
	return 0
}

// HashTable 定义文件分片的校验信息
type HashTable struct {
	// 当前片段的唯一标识,由file_id和segment_index生成
	SegmentId string `protobuf:"bytes,1,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	// 当前片段在文件中的索引位置,从0开始
	SegmentIndex int64 `protobuf:"varint,2,opt,name=segment_index,json=segmentIndex,proto3" json:"segment_index,omitempty"`
	// 分片的CRC32校验和
	Crc32Checksum uint32 `protobuf:"varint,3,opt,name=crc32_checksum,json=crc32Checksum,proto3" json:"crc32_checksum,omitempty"`
	// 是否为纠删码冗余分片
	IsRsCodes            bool     `protobuf:"varint,4,opt,name=is_rs_codes,json=isRsCodes,proto3" json:"is_rs_codes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HashTable) Reset()         { *m = HashTable{} }
func (m *HashTable) String() string { return proto.CompactTextString(m) }
func (*HashTable) ProtoMessage()    {}
func (*HashTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{4}
}
func (m *HashTable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HashTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HashTable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HashTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HashTable.Merge(m, src)
}
func (m *HashTable) XXX_Size() int {
	return m.Size()
}
func (m *HashTable) XXX_DiscardUnknown() {
	xxx_messageInfo_HashTable.DiscardUnknown(m)
}

var xxx_messageInfo_HashTable proto.InternalMessageInfo

func (m *HashTable) GetSegmentId() string {
	if m != nil {
		return m.SegmentId
	}
	return ""
}

func (m *HashTable) GetSegmentIndex() int64 {
	if m != nil {
		return m.SegmentIndex
	}
	return 0
}

func (m *HashTable) GetCrc32Checksum() uint32 {
	if m != nil {
		return m.Crc32Checksum
	}
	return 0
}

func (m *HashTable) GetIsRsCodes() bool {
	if m != nil {
		return m.IsRsCodes
	}
	return false
}

// RequestSetFileSegmentPubSub 请求设置共享文件
type RequestSetFileSegmentPubSub struct {
	// 文件唯一标识，用于在系统内部唯一区分文件
	FileId string `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	// 所有者的公钥哈希，用于身份验证和访问控制
	PubkeyHash []byte `protobuf:"bytes,2,opt,name=pubkey_hash,json=pubkeyHash,proto3" json:"pubkey_hash,omitempty"`
	// 请求者的 AddrInfo，包含节点 ID 和地址信息
	AddrInfo []byte `protobuf:"bytes,3,opt,name=addr_info,json=addrInfo,proto3" json:"addr_info,omitempty"`
	// 是否开启共享，true表示开启共享，false表示关闭共享
	EnableSharing        bool     `protobuf:"varint,4,opt,name=enable_sharing,json=enableSharing,proto3" json:"enable_sharing,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestSetFileSegmentPubSub) Reset()         { *m = RequestSetFileSegmentPubSub{} }
func (m *RequestSetFileSegmentPubSub) String() string { return proto.CompactTextString(m) }
func (*RequestSetFileSegmentPubSub) ProtoMessage()    {}
func (*RequestSetFileSegmentPubSub) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{5}
}
func (m *RequestSetFileSegmentPubSub) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSetFileSegmentPubSub) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSetFileSegmentPubSub.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSetFileSegmentPubSub) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSetFileSegmentPubSub.Merge(m, src)
}
func (m *RequestSetFileSegmentPubSub) XXX_Size() int {
	return m.Size()
}
func (m *RequestSetFileSegmentPubSub) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSetFileSegmentPubSub.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSetFileSegmentPubSub proto.InternalMessageInfo

func (m *RequestSetFileSegmentPubSub) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

func (m *RequestSetFileSegmentPubSub) GetPubkeyHash() []byte {
	if m != nil {
		return m.PubkeyHash
	}
	return nil
}

func (m *RequestSetFileSegmentPubSub) GetAddrInfo() []byte {
	if m != nil {
		return m.AddrInfo
	}
	return nil
}

func (m *RequestSetFileSegmentPubSub) GetEnableSharing() bool {
	if m != nil {
		return m.EnableSharing
	}
	return false
}

// RequestRenameFileSegmentPubSub 请求重命名文件
type RequestRenameFileSegmentPubSub struct {
	// 文件唯一标识，用于在系统内部唯一区分文件
	FileId string `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	// 所有者的公钥哈希，用于身份验证和访问控制
	PubkeyHash []byte `protobuf:"bytes,2,opt,name=pubkey_hash,json=pubkeyHash,proto3" json:"pubkey_hash,omitempty"`
	// 请求者的 AddrInfo，包含节点 ID 和地址信息
	AddrInfo []byte `protobuf:"bytes,3,opt,name=addr_info,json=addrInfo,proto3" json:"addr_info,omitempty"`
	// 新的文件名
	NewName              string   `protobuf:"bytes,4,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestRenameFileSegmentPubSub) Reset()         { *m = RequestRenameFileSegmentPubSub{} }
func (m *RequestRenameFileSegmentPubSub) String() string { return proto.CompactTextString(m) }
func (*RequestRenameFileSegmentPubSub) ProtoMessage()    {}
func (*RequestRenameFileSegmentPubSub) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{6}
}
func (m *RequestRenameFileSegmentPubSub) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestRenameFileSegmentPubSub) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestRenameFileSegmentPubSub.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestRenameFileSegmentPubSub) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestRenameFileSegmentPubSub.Merge(m, src)
}
func (m *RequestRenameFileSegmentPubSub) XXX_Size() int {
	return m.Size()
}
func (m *RequestRenameFileSegmentPubSub) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestRenameFileSegmentPubSub.DiscardUnknown(m)
}

var xxx_messageInfo_RequestRenameFileSegmentPubSub proto.InternalMessageInfo

func (m *RequestRenameFileSegmentPubSub) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

func (m *RequestRenameFileSegmentPubSub) GetPubkeyHash() []byte {
	if m != nil {
		return m.PubkeyHash
	}
	return nil
}

func (m *RequestRenameFileSegmentPubSub) GetAddrInfo() []byte {
	if m != nil {
		return m.AddrInfo
	}
	return nil
}

func (m *RequestRenameFileSegmentPubSub) GetNewName() string {
	if m != nil {
		return m.NewName
	}
	return ""
}

// RequestSearchFileSegmentPubSub 请求检索文件
type RequestSearchFileSegmentPubSub struct {
	// 文件唯一标识，用于在系统内部唯一区分文件
	FileId string `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	// 文件原始名称,不包含扩展名
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 请求者的 AddrInfo，包含节点 ID 和地址信息
	AddrInfo             []byte   `protobuf:"bytes,3,opt,name=addr_info,json=addrInfo,proto3" json:"addr_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestSearchFileSegmentPubSub) Reset()         { *m = RequestSearchFileSegmentPubSub{} }
func (m *RequestSearchFileSegmentPubSub) String() string { return proto.CompactTextString(m) }
func (*RequestSearchFileSegmentPubSub) ProtoMessage()    {}
func (*RequestSearchFileSegmentPubSub) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{7}
}
func (m *RequestSearchFileSegmentPubSub) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSearchFileSegmentPubSub) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSearchFileSegmentPubSub.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSearchFileSegmentPubSub) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSearchFileSegmentPubSub.Merge(m, src)
}
func (m *RequestSearchFileSegmentPubSub) XXX_Size() int {
	return m.Size()
}
func (m *RequestSearchFileSegmentPubSub) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSearchFileSegmentPubSub.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSearchFileSegmentPubSub proto.InternalMessageInfo

func (m *RequestSearchFileSegmentPubSub) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

func (m *RequestSearchFileSegmentPubSub) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RequestSearchFileSegmentPubSub) GetAddrInfo() []byte {
	if m != nil {
		return m.AddrInfo
	}
	return nil
}

// ResponseSearchFileSegmentPubSub 检索文件的响应
type ResponseSearchFileSegmentPubSub struct {
	// 文件唯一标识
	FileId string `protobuf:"bytes,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	// 文件原始名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 文件扩展名
	Extension string `protobuf:"bytes,3,opt,name=extension,proto3" json:"extension,omitempty"`
	// 文件总大小
	Size_ int64 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	// MIME类型
	ContentType string `protobuf:"bytes,5,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// 文件内容的SHA256哈希值,用于校验文件完整性
	Sha256Hash []byte `protobuf:"bytes,6,opt,name=sha256_hash,json=sha256Hash,proto3" json:"sha256_hash,omitempty"`
	// 文件首次上传的Unix时间戳
	UploadTime int64 `protobuf:"varint,7,opt,name=upload_time,json=uploadTime,proto3" json:"upload_time,omitempty"`
	// P2PKH脚本,用于验证文件所有者身份
	P2PkhScript          []byte   `protobuf:"bytes,8,opt,name=p2pkh_script,json=p2pkhScript,proto3" json:"p2pkh_script,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseSearchFileSegmentPubSub) Reset()         { *m = ResponseSearchFileSegmentPubSub{} }
func (m *ResponseSearchFileSegmentPubSub) String() string { return proto.CompactTextString(m) }
func (*ResponseSearchFileSegmentPubSub) ProtoMessage()    {}
func (*ResponseSearchFileSegmentPubSub) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{8}
}
func (m *ResponseSearchFileSegmentPubSub) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseSearchFileSegmentPubSub) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseSearchFileSegmentPubSub.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseSearchFileSegmentPubSub) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseSearchFileSegmentPubSub.Merge(m, src)
}
func (m *ResponseSearchFileSegmentPubSub) XXX_Size() int {
	return m.Size()
}
func (m *ResponseSearchFileSegmentPubSub) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseSearchFileSegmentPubSub.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseSearchFileSegmentPubSub proto.InternalMessageInfo

func (m *ResponseSearchFileSegmentPubSub) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

func (m *ResponseSearchFileSegmentPubSub) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ResponseSearchFileSegmentPubSub) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

func (m *ResponseSearchFileSegmentPubSub) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *ResponseSearchFileSegmentPubSub) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *ResponseSearchFileSegmentPubSub) GetSha256Hash() []byte {
	if m != nil {
		return m.Sha256Hash
	}
	return nil
}

func (m *ResponseSearchFileSegmentPubSub) GetUploadTime() int64 {
	if m != nil {
		return m.UploadTime
	}
	return 0
}

func (m *ResponseSearchFileSegmentPubSub) GetP2PkhScript() []byte {
	if m != nil {
		return m.P2PkhScript
	}
	return nil
}

func init() {
	proto.RegisterType((*FileSegmentStorageSql)(nil), "pb.FileSegmentStorageSql")
	proto.RegisterType((*FileSegmentStorage)(nil), "pb.FileSegmentStorage")
	proto.RegisterMapType((map[int64]*HashTable)(nil), "pb.FileSegmentStorage.SliceTableEntry")
	proto.RegisterType((*SignatureData)(nil), "pb.SignatureData")
	proto.RegisterType((*FileMeta)(nil), "pb.FileMeta")
	proto.RegisterType((*HashTable)(nil), "pb.HashTable")
	proto.RegisterType((*RequestSetFileSegmentPubSub)(nil), "pb.RequestSetFileSegmentPubSub")
	proto.RegisterType((*RequestRenameFileSegmentPubSub)(nil), "pb.RequestRenameFileSegmentPubSub")
	proto.RegisterType((*RequestSearchFileSegmentPubSub)(nil), "pb.RequestSearchFileSegmentPubSub")
	proto.RegisterType((*ResponseSearchFileSegmentPubSub)(nil), "pb.ResponseSearchFileSegmentPubSub")
}

func init() { proto.RegisterFile("storage.proto", fileDescriptor_0d2c4ccf1453ffdb) }

var fileDescriptor_0d2c4ccf1453ffdb = []byte{
	// 786 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x96, 0x4d, 0x6f, 0xdb, 0x36,
	0x18, 0xc7, 0x41, 0xf9, 0x9d, 0xb6, 0x92, 0x8c, 0xc0, 0x36, 0x6e, 0xd9, 0x1c, 0x4f, 0xc1, 0x36,
	0x9f, 0x7c, 0x70, 0xb0, 0x61, 0xd8, 0x6d, 0xcb, 0xde, 0x82, 0xbd, 0x60, 0x90, 0x72, 0x17, 0x68,
	0xe9, 0xb1, 0xc5, 0xda, 0xa6, 0x14, 0x91, 0x4a, 0xe2, 0x7e, 0x82, 0x9e, 0x7b, 0xe8, 0xa5, 0xdf,
	0xa1, 0xb7, 0x5e, 0x7b, 0x2e, 0xd0, 0x4b, 0x3f, 0x42, 0x91, 0x4f, 0x52, 0x90, 0x92, 0xed, 0xd6,
	0xb1, 0xe3, 0x14, 0x28, 0x0a, 0x14, 0xc8, 0x4d, 0xfc, 0xf1, 0x21, 0xf9, 0xf0, 0xff, 0xfc, 0x1f,
	0xda, 0xd8, 0x96, 0x2a, 0x4e, 0xd9, 0x08, 0x7a, 0x49, 0x1a, 0xab, 0x98, 0x58, 0xc9, 0xc0, 0x79,
	0x51, 0xc6, 0x9f, 0xfe, 0xc1, 0x27, 0xe0, 0xc1, 0x68, 0x0a, 0x42, 0x79, 0x79, 0x80, 0x77, 0x36,
	0x21, 0x9f, 0xe3, 0xda, 0x90, 0x4f, 0xc0, 0xe7, 0x21, 0x45, 0x1d, 0xd4, 0x6d, 0xb8, 0x55, 0x3d,
	0x3c, 0x09, 0x09, 0xc1, 0x65, 0xc1, 0xa6, 0x40, 0x2d, 0x43, 0xcd, 0x37, 0xf9, 0x0a, 0x37, 0xe0,
	0x52, 0x81, 0x90, 0x3c, 0x16, 0xb4, 0x64, 0x26, 0x96, 0x40, 0xaf, 0x90, 0xfc, 0x3e, 0xd0, 0x72,
	0x07, 0x75, 0x4b, 0xae, 0xf9, 0x26, 0xdf, 0xe0, 0x56, 0x10, 0x0b, 0x05, 0x42, 0xf9, 0x6a, 0x96,
	0x00, 0xad, 0x98, 0x45, 0xcd, 0x82, 0x9d, 0xce, 0x12, 0x20, 0x07, 0xb8, 0x29, 0x23, 0xd6, 0xff,
	0xe1, 0x47, 0x3f, 0x62, 0x32, 0xa2, 0xd5, 0x0e, 0xea, 0xb6, 0x5c, 0x9c, 0xa3, 0xbf, 0x98, 0x8c,
	0x74, 0x40, 0x96, 0x4c, 0x62, 0x16, 0xfa, 0x8a, 0x4f, 0x81, 0xd6, 0xcc, 0xf6, 0x38, 0x47, 0xa7,
	0x7c, 0x6a, 0x0e, 0x49, 0xfa, 0xc9, 0x38, 0xf2, 0x65, 0x90, 0xf2, 0x44, 0xd1, 0xba, 0xd9, 0xa2,
	0x69, 0x98, 0x67, 0x90, 0xde, 0x43, 0x0f, 0xe7, 0x11, 0x8d, 0xfc, 0x10, 0x8d, 0x96, 0x01, 0x72,
	0xc2, 0x03, 0xf0, 0x15, 0x1b, 0x4c, 0x80, 0xe2, 0x22, 0x0b, 0x8d, 0x4e, 0x35, 0x21, 0x5f, 0x63,
	0x2c, 0x73, 0xf5, 0xb4, 0x56, 0xcd, 0xfc, 0xf2, 0x05, 0x39, 0x09, 0xc9, 0x21, 0xb6, 0x17, 0xd3,
	0x22, 0x84, 0x4b, 0xda, 0x32, 0x69, 0xb6, 0xe6, 0x11, 0x9a, 0x91, 0x6f, 0xf1, 0x4e, 0x90, 0x06,
	0x47, 0x7d, 0x3f, 0x88, 0x20, 0x18, 0xcb, 0x6c, 0x4a, 0xed, 0x0e, 0xea, 0xda, 0xae, 0x6d, 0xe8,
	0x71, 0x01, 0xc9, 0xf7, 0x78, 0x77, 0xbe, 0x57, 0x21, 0x14, 0xdd, 0x31, 0xf9, 0xec, 0x14, 0xf8,
	0x38, 0xa7, 0x7a, 0x3f, 0x10, 0x41, 0x3a, 0x4b, 0x14, 0x8f, 0x85, 0x3f, 0x86, 0x19, 0xdd, 0x35,
	0x71, 0xf6, 0x92, 0xfe, 0x0d, 0x33, 0x5d, 0x36, 0xc9, 0x47, 0x82, 0xa9, 0x2c, 0x05, 0xba, 0x67,
	0x22, 0x96, 0x80, 0x7c, 0x86, 0xab, 0x32, 0x62, 0x29, 0x84, 0xf4, 0x93, 0x0e, 0xea, 0xd6, 0xdd,
	0x62, 0x44, 0x28, 0xae, 0x9d, 0x43, 0x6a, 0x4a, 0x4d, 0xcc, 0x6d, 0xe7, 0x43, 0xe7, 0x59, 0x05,
	0x93, 0xeb, 0x6e, 0xba, 0xb3, 0x52, 0x11, 0xf0, 0xe7, 0xaa, 0x95, 0x4a, 0xdd, 0x66, 0xff, 0xbb,
	0x5e, 0x32, 0xe8, 0x5d, 0x17, 0xad, 0xe7, 0x2d, 0x1c, 0xf6, 0xbb, 0x50, 0xe9, 0xec, 0xce, 0x72,
	0x6b, 0x2d, 0xf7, 0xe5, 0x3f, 0x78, 0x77, 0x45, 0x29, 0xb2, 0x87, 0x4b, 0xfa, 0x78, 0x64, 0x2e,
	0xad, 0x3f, 0xc9, 0x21, 0xae, 0x9c, 0xb3, 0x49, 0x96, 0x1b, 0xad, 0xd9, 0xb7, 0xb5, 0xe4, 0xba,
	0xec, 0x66, 0x91, 0x9b, 0xcf, 0xfd, 0x6c, 0xfd, 0x84, 0x9c, 0x27, 0x16, 0xb6, 0xbd, 0x79, 0x36,
	0xbf, 0x31, 0xc5, 0x36, 0x7b, 0x77, 0xd5, 0x75, 0xd6, 0x56, 0xd7, 0x95, 0xae, 0xb9, 0xae, 0xf7,
	0xb6, 0x21, 0xca, 0xc6, 0x10, 0x2b, 0xd9, 0x6d, 0xae, 0x7b, 0x65, 0x6b, 0xdd, 0xab, 0xb7, 0xaa,
	0x7b, 0x6d, 0x5d, 0xdd, 0x97, 0xe5, 0x84, 0xd0, 0x0f, 0x99, 0x62, 0x85, 0xe3, 0xed, 0x05, 0xd5,
	0xf2, 0x38, 0x4f, 0x11, 0xae, 0x6b, 0xf3, 0xfe, 0x0b, 0x8a, 0x2d, 0xda, 0x19, 0x6d, 0x6a, 0x67,
	0x6b, 0x53, 0x3b, 0x97, 0x6e, 0x68, 0xe7, 0xf2, 0x56, 0x61, 0x2b, 0xeb, 0xda, 0x79, 0x1a, 0x87,
	0x7c, 0xc8, 0x21, 0xf4, 0x99, 0x2a, 0x74, 0xc0, 0x73, 0xf4, 0x8b, 0x72, 0x1e, 0x21, 0xdc, 0x58,
	0x68, 0xbc, 0xa2, 0x2b, 0xda, 0xaa, 0xab, 0x75, 0x2b, 0x5d, 0x4b, 0xeb, 0x74, 0x6d, 0xe3, 0x26,
	0x97, 0x7e, 0x2a, 0xfd, 0x20, 0x0e, 0x41, 0x9a, 0xcb, 0xd5, 0xdd, 0x06, 0x97, 0xae, 0x3c, 0xd6,
	0xc0, 0x79, 0x8c, 0xf0, 0xbe, 0x0b, 0x67, 0x19, 0x48, 0xe5, 0x81, 0x7a, 0xe3, 0x5d, 0xf8, 0x3f,
	0x1b, 0x78, 0xd9, 0x60, 0xb3, 0x1f, 0xf5, 0xeb, 0x93, 0x0d, 0xc6, 0x30, 0xcb, 0x35, 0xb1, 0x8a,
	0xd7, 0xc7, 0x20, 0xa3, 0xc9, 0x3e, 0x6e, 0xb0, 0x30, 0x4c, 0x7d, 0x2e, 0x86, 0x71, 0xe1, 0xc5,
	0xba, 0x06, 0x27, 0x62, 0x18, 0xe7, 0xe5, 0xd6, 0x5a, 0xf8, 0xba, 0xe3, 0xb8, 0x18, 0x15, 0x99,
	0xd9, 0x39, 0xf5, 0x72, 0xe8, 0x3c, 0x44, 0xb8, 0x5d, 0x64, 0xe7, 0x82, 0xae, 0xef, 0x07, 0x4b,
	0xf0, 0x0b, 0x5c, 0x17, 0x70, 0xe1, 0x1b, 0x7f, 0xe5, 0x8e, 0xa8, 0x09, 0xb8, 0xf8, 0x8f, 0x4d,
	0xc1, 0xb9, 0xb7, 0xc8, 0xc9, 0x03, 0x96, 0x06, 0xd1, 0x3b, 0xe4, 0xb4, 0xee, 0x07, 0xe8, 0xa6,
	0x34, 0x9c, 0x07, 0x16, 0x3e, 0x70, 0x41, 0x26, 0xb1, 0x90, 0xf0, 0x5e, 0x4e, 0xfb, 0x68, 0x7f,
	0xee, 0x7e, 0x6d, 0x3d, 0xbf, 0x6a, 0xa3, 0x97, 0x57, 0x6d, 0xf4, 0xea, 0xaa, 0x8d, 0x06, 0x55,
	0xf3, 0x9f, 0xf2, 0xe8, 0x75, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x9e, 0xd9, 0x92, 0x64, 0x0a,
	0x00, 0x00,
}

func (m *FileSegmentStorageSql) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileSegmentStorageSql) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileSegmentStorageSql) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.Shared {
		i--
		if m.Shared {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.EncryptionKey) > 0 {
		i -= len(m.EncryptionKey)
		copy(dAtA[i:], m.EncryptionKey)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.EncryptionKey)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.SegmentContent) > 0 {
		i -= len(m.SegmentContent)
		copy(dAtA[i:], m.SegmentContent)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.SegmentContent)))
		i--
		dAtA[i] = 0x72
	}
	if m.Crc32Checksum != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.Crc32Checksum))
		i--
		dAtA[i] = 0x68
	}
	if m.SegmentIndex != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.SegmentIndex))
		i--
		dAtA[i] = 0x60
	}
	if len(m.SegmentId) > 0 {
		i -= len(m.SegmentId)
		copy(dAtA[i:], m.SegmentId)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.SegmentId)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SliceTable) > 0 {
		i -= len(m.SliceTable)
		copy(dAtA[i:], m.SliceTable)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.SliceTable)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.P2PkScript) > 0 {
		i -= len(m.P2PkScript)
		copy(dAtA[i:], m.P2PkScript)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.P2PkScript)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.P2PkhScript) > 0 {
		i -= len(m.P2PkhScript)
		copy(dAtA[i:], m.P2PkhScript)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.P2PkhScript)))
		i--
		dAtA[i] = 0x42
	}
	if m.UploadTime != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.UploadTime))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Sha256Hash) > 0 {
		i -= len(m.Sha256Hash)
		copy(dAtA[i:], m.Sha256Hash)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Sha256Hash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ContentType) > 0 {
		i -= len(m.ContentType)
		copy(dAtA[i:], m.ContentType)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.ContentType)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Size_ != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Extension) > 0 {
		i -= len(m.Extension)
		copy(dAtA[i:], m.Extension)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Extension)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FileId) > 0 {
		i -= len(m.FileId)
		copy(dAtA[i:], m.FileId)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.FileId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FileSegmentStorage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileSegmentStorage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileSegmentStorage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.Shared {
		i--
		if m.Shared {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.EncryptionKey) > 0 {
		i -= len(m.EncryptionKey)
		copy(dAtA[i:], m.EncryptionKey)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.EncryptionKey)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.SegmentContent) > 0 {
		i -= len(m.SegmentContent)
		copy(dAtA[i:], m.SegmentContent)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.SegmentContent)))
		i--
		dAtA[i] = 0x72
	}
	if m.Crc32Checksum != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.Crc32Checksum))
		i--
		dAtA[i] = 0x68
	}
	if m.SegmentIndex != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.SegmentIndex))
		i--
		dAtA[i] = 0x60
	}
	if len(m.SegmentId) > 0 {
		i -= len(m.SegmentId)
		copy(dAtA[i:], m.SegmentId)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.SegmentId)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SliceTable) > 0 {
		for k := range m.SliceTable {
			v := m.SliceTable[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintStorage(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintStorage(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintStorage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.P2PkScript) > 0 {
		i -= len(m.P2PkScript)
		copy(dAtA[i:], m.P2PkScript)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.P2PkScript)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.P2PkhScript) > 0 {
		i -= len(m.P2PkhScript)
		copy(dAtA[i:], m.P2PkhScript)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.P2PkhScript)))
		i--
		dAtA[i] = 0x42
	}
	if m.UploadTime != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.UploadTime))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Sha256Hash) > 0 {
		i -= len(m.Sha256Hash)
		copy(dAtA[i:], m.Sha256Hash)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Sha256Hash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ContentType) > 0 {
		i -= len(m.ContentType)
		copy(dAtA[i:], m.ContentType)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.ContentType)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Size_ != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Extension) > 0 {
		i -= len(m.Extension)
		copy(dAtA[i:], m.Extension)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Extension)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FileId) > 0 {
		i -= len(m.FileId)
		copy(dAtA[i:], m.FileId)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.FileId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignatureData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignatureData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignatureData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EncryptedData) > 0 {
		i -= len(m.EncryptedData)
		copy(dAtA[i:], m.EncryptedData)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.EncryptedData)))
		i--
		dAtA[i] = 0x42
	}
	if m.Crc32Checksum != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.Crc32Checksum))
		i--
		dAtA[i] = 0x38
	}
	if m.SegmentIndex != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.SegmentIndex))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SegmentId) > 0 {
		i -= len(m.SegmentId)
		copy(dAtA[i:], m.SegmentId)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.SegmentId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SliceTable) > 0 {
		for iNdEx := len(m.SliceTable) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SliceTable[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStorage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Sha256Hash) > 0 {
		i -= len(m.Sha256Hash)
		copy(dAtA[i:], m.Sha256Hash)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Sha256Hash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContentType) > 0 {
		i -= len(m.ContentType)
		copy(dAtA[i:], m.ContentType)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.ContentType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FileId) > 0 {
		i -= len(m.FileId)
		copy(dAtA[i:], m.FileId)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.FileId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FileMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ModifiedAt != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.ModifiedAt))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Sha256Hash) > 0 {
		i -= len(m.Sha256Hash)
		copy(dAtA[i:], m.Sha256Hash)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Sha256Hash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ContentType) > 0 {
		i -= len(m.ContentType)
		copy(dAtA[i:], m.ContentType)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.ContentType)))
		i--
		dAtA[i] = 0x22
	}
	if m.Size_ != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Extension) > 0 {
		i -= len(m.Extension)
		copy(dAtA[i:], m.Extension)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Extension)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HashTable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HashTable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HashTable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsRsCodes {
		i--
		if m.IsRsCodes {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Crc32Checksum != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.Crc32Checksum))
		i--
		dAtA[i] = 0x18
	}
	if m.SegmentIndex != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.SegmentIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SegmentId) > 0 {
		i -= len(m.SegmentId)
		copy(dAtA[i:], m.SegmentId)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.SegmentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestSetFileSegmentPubSub) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSetFileSegmentPubSub) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSetFileSegmentPubSub) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EnableSharing {
		i--
		if m.EnableSharing {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.AddrInfo) > 0 {
		i -= len(m.AddrInfo)
		copy(dAtA[i:], m.AddrInfo)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.AddrInfo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PubkeyHash) > 0 {
		i -= len(m.PubkeyHash)
		copy(dAtA[i:], m.PubkeyHash)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.PubkeyHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FileId) > 0 {
		i -= len(m.FileId)
		copy(dAtA[i:], m.FileId)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.FileId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestRenameFileSegmentPubSub) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRenameFileSegmentPubSub) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestRenameFileSegmentPubSub) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NewName) > 0 {
		i -= len(m.NewName)
		copy(dAtA[i:], m.NewName)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.NewName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AddrInfo) > 0 {
		i -= len(m.AddrInfo)
		copy(dAtA[i:], m.AddrInfo)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.AddrInfo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PubkeyHash) > 0 {
		i -= len(m.PubkeyHash)
		copy(dAtA[i:], m.PubkeyHash)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.PubkeyHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FileId) > 0 {
		i -= len(m.FileId)
		copy(dAtA[i:], m.FileId)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.FileId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestSearchFileSegmentPubSub) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSearchFileSegmentPubSub) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSearchFileSegmentPubSub) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AddrInfo) > 0 {
		i -= len(m.AddrInfo)
		copy(dAtA[i:], m.AddrInfo)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.AddrInfo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FileId) > 0 {
		i -= len(m.FileId)
		copy(dAtA[i:], m.FileId)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.FileId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseSearchFileSegmentPubSub) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSearchFileSegmentPubSub) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseSearchFileSegmentPubSub) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.P2PkhScript) > 0 {
		i -= len(m.P2PkhScript)
		copy(dAtA[i:], m.P2PkhScript)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.P2PkhScript)))
		i--
		dAtA[i] = 0x42
	}
	if m.UploadTime != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.UploadTime))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Sha256Hash) > 0 {
		i -= len(m.Sha256Hash)
		copy(dAtA[i:], m.Sha256Hash)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Sha256Hash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ContentType) > 0 {
		i -= len(m.ContentType)
		copy(dAtA[i:], m.ContentType)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.ContentType)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Size_ != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Extension) > 0 {
		i -= len(m.Extension)
		copy(dAtA[i:], m.Extension)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Extension)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FileId) > 0 {
		i -= len(m.FileId)
		copy(dAtA[i:], m.FileId)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.FileId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStorage(dAtA []byte, offset int, v uint64) int {
	offset -= sovStorage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FileSegmentStorageSql) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileId)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Extension)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovStorage(uint64(m.Size_))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Sha256Hash)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.UploadTime != 0 {
		n += 1 + sovStorage(uint64(m.UploadTime))
	}
	l = len(m.P2PkhScript)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.P2PkScript)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.SliceTable)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.SegmentId)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.SegmentIndex != 0 {
		n += 1 + sovStorage(uint64(m.SegmentIndex))
	}
	if m.Crc32Checksum != 0 {
		n += 1 + sovStorage(uint64(m.Crc32Checksum))
	}
	l = len(m.SegmentContent)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.EncryptionKey)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 2 + l + sovStorage(uint64(l))
	}
	if m.Shared {
		n += 3
	}
	l = len(m.Version)
	if l > 0 {
		n += 2 + l + sovStorage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FileSegmentStorage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileId)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Extension)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovStorage(uint64(m.Size_))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Sha256Hash)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.UploadTime != 0 {
		n += 1 + sovStorage(uint64(m.UploadTime))
	}
	l = len(m.P2PkhScript)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.P2PkScript)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if len(m.SliceTable) > 0 {
		for k, v := range m.SliceTable {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovStorage(uint64(l))
			}
			mapEntrySize := 1 + sovStorage(uint64(k)) + l
			n += mapEntrySize + 1 + sovStorage(uint64(mapEntrySize))
		}
	}
	l = len(m.SegmentId)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.SegmentIndex != 0 {
		n += 1 + sovStorage(uint64(m.SegmentIndex))
	}
	if m.Crc32Checksum != 0 {
		n += 1 + sovStorage(uint64(m.Crc32Checksum))
	}
	l = len(m.SegmentContent)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.EncryptionKey)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 2 + l + sovStorage(uint64(l))
	}
	if m.Shared {
		n += 3
	}
	l = len(m.Version)
	if l > 0 {
		n += 2 + l + sovStorage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignatureData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileId)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Sha256Hash)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if len(m.SliceTable) > 0 {
		for _, e := range m.SliceTable {
			l = e.Size()
			n += 1 + l + sovStorage(uint64(l))
		}
	}
	l = len(m.SegmentId)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.SegmentIndex != 0 {
		n += 1 + sovStorage(uint64(m.SegmentIndex))
	}
	if m.Crc32Checksum != 0 {
		n += 1 + sovStorage(uint64(m.Crc32Checksum))
	}
	l = len(m.EncryptedData)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FileMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Extension)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovStorage(uint64(m.Size_))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Sha256Hash)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.ModifiedAt != 0 {
		n += 1 + sovStorage(uint64(m.ModifiedAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HashTable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SegmentId)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.SegmentIndex != 0 {
		n += 1 + sovStorage(uint64(m.SegmentIndex))
	}
	if m.Crc32Checksum != 0 {
		n += 1 + sovStorage(uint64(m.Crc32Checksum))
	}
	if m.IsRsCodes {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestSetFileSegmentPubSub) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileId)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.PubkeyHash)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.AddrInfo)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.EnableSharing {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestRenameFileSegmentPubSub) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileId)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.PubkeyHash)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.AddrInfo)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.NewName)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestSearchFileSegmentPubSub) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileId)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.AddrInfo)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResponseSearchFileSegmentPubSub) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileId)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Extension)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovStorage(uint64(m.Size_))
	}
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Sha256Hash)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.UploadTime != 0 {
		n += 1 + sovStorage(uint64(m.UploadTime))
	}
	l = len(m.P2PkhScript)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStorage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStorage(x uint64) (n int) {
	return sovStorage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FileSegmentStorageSql) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileSegmentStorageSql: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileSegmentStorageSql: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extension", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extension = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha256Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha256Hash = append(m.Sha256Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Sha256Hash == nil {
				m.Sha256Hash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadTime", wireType)
			}
			m.UploadTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UploadTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P2PkhScript", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P2PkhScript = append(m.P2PkhScript[:0], dAtA[iNdEx:postIndex]...)
			if m.P2PkhScript == nil {
				m.P2PkhScript = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P2PkScript", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P2PkScript = append(m.P2PkScript[:0], dAtA[iNdEx:postIndex]...)
			if m.P2PkScript == nil {
				m.P2PkScript = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceTable", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SliceTable = append(m.SliceTable[:0], dAtA[iNdEx:postIndex]...)
			if m.SliceTable == nil {
				m.SliceTable = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SegmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentIndex", wireType)
			}
			m.SegmentIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SegmentIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crc32Checksum", wireType)
			}
			m.Crc32Checksum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Crc32Checksum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentContent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SegmentContent = append(m.SegmentContent[:0], dAtA[iNdEx:postIndex]...)
			if m.SegmentContent == nil {
				m.SegmentContent = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptionKey = append(m.EncryptionKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptionKey == nil {
				m.EncryptionKey = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shared", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Shared = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileSegmentStorage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileSegmentStorage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileSegmentStorage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extension", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extension = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha256Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha256Hash = append(m.Sha256Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Sha256Hash == nil {
				m.Sha256Hash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadTime", wireType)
			}
			m.UploadTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UploadTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P2PkhScript", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P2PkhScript = append(m.P2PkhScript[:0], dAtA[iNdEx:postIndex]...)
			if m.P2PkhScript == nil {
				m.P2PkhScript = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P2PkScript", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P2PkScript = append(m.P2PkScript[:0], dAtA[iNdEx:postIndex]...)
			if m.P2PkScript == nil {
				m.P2PkScript = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceTable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SliceTable == nil {
				m.SliceTable = make(map[int64]*HashTable)
			}
			var mapkey int64
			var mapvalue *HashTable
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStorage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStorage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStorage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthStorage
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthStorage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &HashTable{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStorage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthStorage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SliceTable[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SegmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentIndex", wireType)
			}
			m.SegmentIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SegmentIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crc32Checksum", wireType)
			}
			m.Crc32Checksum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Crc32Checksum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentContent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SegmentContent = append(m.SegmentContent[:0], dAtA[iNdEx:postIndex]...)
			if m.SegmentContent == nil {
				m.SegmentContent = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptionKey = append(m.EncryptionKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptionKey == nil {
				m.EncryptionKey = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shared", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Shared = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignatureData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignatureData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignatureData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha256Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha256Hash = append(m.Sha256Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Sha256Hash == nil {
				m.Sha256Hash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SliceTable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SliceTable = append(m.SliceTable, &HashTable{})
			if err := m.SliceTable[len(m.SliceTable)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SegmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentIndex", wireType)
			}
			m.SegmentIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SegmentIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crc32Checksum", wireType)
			}
			m.Crc32Checksum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Crc32Checksum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedData = append(m.EncryptedData[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedData == nil {
				m.EncryptedData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extension", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extension = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha256Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha256Hash = append(m.Sha256Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Sha256Hash == nil {
				m.Sha256Hash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedAt", wireType)
			}
			m.ModifiedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModifiedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HashTable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HashTable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HashTable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SegmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentIndex", wireType)
			}
			m.SegmentIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SegmentIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crc32Checksum", wireType)
			}
			m.Crc32Checksum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Crc32Checksum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRsCodes", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRsCodes = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSetFileSegmentPubSub) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSetFileSegmentPubSub: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSetFileSegmentPubSub: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubkeyHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubkeyHash = append(m.PubkeyHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PubkeyHash == nil {
				m.PubkeyHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddrInfo = append(m.AddrInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.AddrInfo == nil {
				m.AddrInfo = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableSharing", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableSharing = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestRenameFileSegmentPubSub) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRenameFileSegmentPubSub: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRenameFileSegmentPubSub: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubkeyHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubkeyHash = append(m.PubkeyHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PubkeyHash == nil {
				m.PubkeyHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddrInfo = append(m.AddrInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.AddrInfo == nil {
				m.AddrInfo = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSearchFileSegmentPubSub) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSearchFileSegmentPubSub: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSearchFileSegmentPubSub: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddrInfo = append(m.AddrInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.AddrInfo == nil {
				m.AddrInfo = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSearchFileSegmentPubSub) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSearchFileSegmentPubSub: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSearchFileSegmentPubSub: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extension", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extension = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha256Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha256Hash = append(m.Sha256Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Sha256Hash == nil {
				m.Sha256Hash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadTime", wireType)
			}
			m.UploadTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UploadTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P2PkhScript", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P2PkhScript = append(m.P2PkhScript[:0], dAtA[iNdEx:postIndex]...)
			if m.P2PkhScript == nil {
				m.P2PkhScript = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStorage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStorage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStorage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStorage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStorage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStorage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStorage = fmt.Errorf("proto: unexpected end of group")
)
